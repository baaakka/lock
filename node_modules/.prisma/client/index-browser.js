
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.5.0
 * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
 */
Prisma.prismaVersion = {
  client: "4.5.0",
  engine: "0362da9eebca54d94c8ef5edd3b2e90af99ba452"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.PlatformScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  link: 'link',
  isPopular: 'isPopular',
  title: 'title'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RewardScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  name: 'name',
  image: 'image',
  smallImage: 'smallImage',
  cost: 'cost',
  rarity: 'rarity',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  isCakeBox: 'isCakeBox',
  isOnCakeBox: 'isOnCakeBox',
  isConfectionary: 'isConfectionary',
  RewardByIDs: 'RewardByIDs',
  rewardIDs: 'rewardIDs',
  initial: 'initial'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TokenScalarFieldEnum = makeEnum({
  id: 'id',
  authToken: 'authToken',
  refreshToken: 'refreshToken',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDisabled: 'isDisabled'
});

exports.Prisma.TransactionHystoryScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  sliceId: 'sliceId',
  amount: 'amount',
  rewardId: 'rewardId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  createdAt: 'createdAt',
  role: 'role',
  updatedAt: 'updatedAt',
  phoneNumber: 'phoneNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  recoveryPhase: 'recoveryPhase',
  slicesCollected: 'slicesCollected',
  slicesPurchased: 'slicesPurchased',
  slicesSold: 'slicesSold',
  cakeBoxClaimed: 'cakeBoxClaimed',
  totalRewardsEarned: 'totalRewardsEarned',
  avatar: 'avatar',
  sugar: 'sugar',
  followedByIDs: 'followedByIDs',
  followingIDs: 'followingIDs'
});

exports.Prisma.WalletScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  name: 'name',
  address: 'address',
  userId: 'userId'
});
exports.RarityEnum = makeEnum({
  EXOTIC: 'EXOTIC',
  LEGENDARY: 'LEGENDARY',
  EPIC: 'EPIC',
  SUPERIOR: 'SUPERIOR',
  BASIC: 'BASIC',
  STARTER: 'STARTER',
  SLICE: 'SLICE',
  COMMON: 'COMMON'
});

exports.RewardEnum = makeEnum({
  SLICE: 'SLICE',
  CAKEBOX: 'CAKEBOX',
  SUGAR: 'SUGAR'
});

exports.Role = makeEnum({
  ADMIN: 'ADMIN',
  USER: 'USER',
  KOL: 'KOL'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Platform: 'Platform',
  Wallet: 'Wallet',
  Reward: 'Reward',
  Token: 'Token',
  TransactionHystory: 'TransactionHystory'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
