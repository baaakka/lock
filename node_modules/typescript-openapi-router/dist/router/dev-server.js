"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("http");
var __1 = require("..");
var request_1 = require("./request");
var paramsToObject = function (params) {
    var result = {};
    params.forEach(function (value, key) {
        result[key] = value;
    });
    return result;
};
var getRequestFromEvent = function (request, parsedBody, rawBody) {
    var headers = request.headers;
    var method = request.method;
    var urlString = "" + headers.host + request.url;
    var url = new URL(urlString);
    var path = url.pathname.replace("8080", "");
    var queryParams = paramsToObject(url.searchParams);
    var routerRequest = new request_1.Request({
        headers: headers,
        path: path,
        method: method,
        body: parsedBody,
        rawBody: rawBody,
        queryParams: queryParams
    });
    console.log("Router request", routerRequest);
    return routerRequest;
};
var DevServer = /** @class */ (function () {
    function DevServer(router, port) {
        var _this = this;
        if (port === void 0) { port = 8080; }
        this.port = port;
        this.onRequest = function (request, response) { return __awaiter(_this, void 0, void 0, function () {
            var data;
            var _this = this;
            return __generator(this, function (_a) {
                data = "";
                request.on("data", function (chunk) {
                    data += chunk;
                });
                request.on("end", function () { return __awaiter(_this, void 0, void 0, function () {
                    var parsedBody, routerRequest, result, e_1;
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (data) {
                                    try {
                                        parsedBody = JSON.parse(data);
                                    }
                                    catch (e) {
                                        response.statusCode = 400;
                                        response.end({
                                            errors: [
                                                {
                                                    code: "1",
                                                    message: e.message
                                                }
                                            ]
                                        });
                                    }
                                }
                                routerRequest = getRequestFromEvent(request, parsedBody, data);
                                if (((_a = request.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()) === __1.HttpMethod.OPTIONS) {
                                    response.setHeader('Access-Control-Expose-Headers', '*');
                                    response.setHeader('Access-Control-Allow-Credentials', 'true');
                                    response.setHeader('Access-Control-Max-Age', '3600');
                                    response.setHeader('Access-Control-Allow-Origin', '*');
                                    response.setHeader('Access-Control-Allow-Headers', '*');
                                    response.setHeader('Access-Control-Allow-Methods', '*');
                                    response.setHeader('Connection', 'keep-alive');
                                    response.setHeader('Access-Control-Request-Method', 'POST');
                                    response.setHeader('Allow', 'GET, POST, PUT, DELETE, OPTIONS, HEAD');
                                    response.setHeader('Allowed', 'GET, POST, PUT, DELETE, OPTIONS, HEAD');
                                    response.writeHead(200);
                                    return [2 /*return*/, response.end()];
                                }
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.router.handleEvent(routerRequest)];
                            case 2:
                                result = _b.sent();
                                response.writeHead(result.statusCode, result.headers);
                                response.end(result.body);
                                return [3 /*break*/, 4];
                            case 3:
                                e_1 = _b.sent();
                                response.statusCode = 500;
                                response.end({
                                    errors: [
                                        {
                                            code: "1",
                                            message: e_1.message
                                        }
                                    ]
                                });
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
            });
        }); };
        this.router = router;
    }
    DevServer.prototype.start = function () {
        var _this = this;
        this.server = http_1.createServer(this.onRequest)
            .listen(this.port)
            .on("listening", function () {
            console.log("Server started: http://localhost:" + _this.port);
        })
            .on("close", function () {
            console.log("Server closed");
        })
            .on("error", function (err) {
            console.log("Server error");
            console.error(err);
        })
            .on("connection", function () {
            console.log("Received connection");
        });
    };
    DevServer.prototype.stop = function () {
        if (this.server) {
            this.server.close();
        }
    };
    return DevServer;
}());
exports.DevServer = DevServer;
//# sourceMappingURL=dev-server.js.map