"use strict";
/**
 * Copyright 2020 Valentin Draganescu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var metadata_storage_1 = require("../metadata/metadata-storage");
var generator_1 = require("../doc/generator");
var logger_1 = require("../logger");
var __1 = require("..");
var validator_1 = require("../validator/validator");
var get_random_1 = require("./mock/get-random");
var Router = /** @class */ (function () {
    function Router() {
        var _this = this;
        this.handleEvent = function (request) { return __awaiter(_this, void 0, void 0, function () {
            var resp, req, _a, route, pathParams, middleware, inputValidationErrors, _i, _b, queryParam, globalMiddleware, responseMeta, globalResponses, body, outputValidationResult;
            var _c, _d;
            var _e, _f, _g, _h;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        logger_1.Logger.time("[TIMING] Router");
                        resp = null;
                        req = request;
                        logger_1.Logger.time("[TIMING] Router handler resolver");
                        _a = this.resolveHandler(req.method, req.path), route = _a[0], pathParams = _a[1], middleware = _a[2];
                        logger_1.Logger.timeEnd("[TIMING] Router handler resolver");
                        if (!route) return [3 /*break*/, 10];
                        logger_1.Logger.log("Route resolved to::", route.path);
                        req.pathParams = pathParams;
                        // validate request;
                        if (route.requestBody) {
                            logger_1.Logger.time("[TIMING] Router validate request");
                            logger_1.Logger.log("Validating input");
                            inputValidationErrors = validator_1.Validator.validate(req.body, route.requestBody.name);
                            if (inputValidationErrors && inputValidationErrors.length) {
                                logger_1.Logger.timeEnd("[TIMING] Router");
                                return [2 /*return*/, new __1.Response(__1.StatusCode.badRequest).setBody({
                                        errors: inputValidationErrors,
                                    })];
                            }
                            logger_1.Logger.timeEnd("[TIMING] Router validate request");
                        }
                        if (request.queryParams) {
                            for (_i = 0, _b = Object.keys(request.queryParams); _i < _b.length; _i++) {
                                queryParam = _b[_i];
                                request.queryParams[queryParam] = decodeURIComponent(request.queryParams[queryParam]);
                            }
                        }
                        logger_1.Logger.time("[TIMING] Router middleware before");
                        globalMiddleware = (_e = metadata_storage_1.getMetadataStorage().docMetadata) === null || _e === void 0 ? void 0 : _e.globalMiddleware;
                        if (!(globalMiddleware && globalMiddleware.before)) return [3 /*break*/, 2];
                        logger_1.Logger.log("Executing global middleware before");
                        return [4 /*yield*/, this.executeMiddlewareBefore((_f = globalMiddleware) === null || _f === void 0 ? void 0 : _f.before, req)];
                    case 1:
                        _c = _j.sent(), req = _c[0], resp = _c[1];
                        if (resp) {
                            logger_1.Logger.timeEnd("[TIMING] Router");
                            return [2 /*return*/, resp];
                        }
                        _j.label = 2;
                    case 2:
                        if (!(middleware && middleware.before)) return [3 /*break*/, 4];
                        logger_1.Logger.log("Executing middleware before");
                        return [4 /*yield*/, this.executeMiddlewareBefore(middleware.before, req)];
                    case 3:
                        _d = _j.sent(), req = _d[0], resp = _d[1];
                        if (resp) {
                            logger_1.Logger.timeEnd("[TIMING] Router");
                            return [2 /*return*/, resp];
                        }
                        _j.label = 4;
                    case 4:
                        logger_1.Logger.timeEnd("[TIMING] Router middleware before");
                        logger_1.Logger.log("Executing handler");
                        logger_1.Logger.time("[TIMING] Router handler");
                        return [4 /*yield*/, route.handler(req)];
                    case 5:
                        resp = _j.sent();
                        logger_1.Logger.timeEnd("[TIMING] Router handler");
                        logger_1.Logger.time("[TIMING] Router middleware after");
                        if (!(middleware && middleware.after)) return [3 /*break*/, 7];
                        logger_1.Logger.log("Executing middleware after");
                        return [4 /*yield*/, this.executeMiddlewareAfter(middleware.after, resp)];
                    case 6:
                        resp = _j.sent();
                        _j.label = 7;
                    case 7:
                        if (!(globalMiddleware && globalMiddleware.after)) return [3 /*break*/, 9];
                        logger_1.Logger.log("Executing global middleware after");
                        return [4 /*yield*/, this.executeMiddlewareAfter(globalMiddleware.after, resp)];
                    case 8:
                        resp = _j.sent();
                        _j.label = 9;
                    case 9:
                        logger_1.Logger.time("[TIMING] Router middleware after");
                        // validate response
                        logger_1.Logger.time("[TIMING] Router validate response");
                        logger_1.Logger.log("Validating response");
                        responseMeta = route.responses.find(function (r) { return r.statusCode === resp.statusCode; });
                        logger_1.Logger.log("Route responses::", route.responses);
                        if (!responseMeta) {
                            globalResponses = (_g = metadata_storage_1.getMetadataStorage().docMetadata) === null || _g === void 0 ? void 0 : _g.globalResponses;
                            logger_1.Logger.log("Global responses::", globalResponses);
                            responseMeta = (_h = globalResponses) === null || _h === void 0 ? void 0 : _h.find(function (r) { return r.statusCode === resp.statusCode; });
                        }
                        if (!responseMeta) {
                            throw new Error("No response defined for status code " + resp.statusCode);
                        }
                        if (responseMeta.body) {
                            logger_1.Logger.log("Validating output");
                            body = resp.getBody();
                            outputValidationResult = validator_1.Validator.validate(body, responseMeta.body.name);
                            logger_1.Logger.timeEnd("[TIMING] Router validate response");
                            if (outputValidationResult && outputValidationResult.length) {
                                // the API broke the contract with the client, fail the request
                                console.log(outputValidationResult);
                                logger_1.Logger.timeEnd("[TIMING] Router");
                                return [2 /*return*/, new __1.Response(__1.StatusCode.internalServerError).setBody({
                                        errors: outputValidationResult,
                                    })];
                            }
                        }
                        logger_1.Logger.timeEnd("[TIMING] Router");
                        return [2 /*return*/, resp];
                    case 10:
                        logger_1.Logger.log("Route not resolved::", JSON.stringify(request));
                        _j.label = 11;
                    case 11:
                        logger_1.Logger.timeEnd("[TIMING] Router");
                        return [2 /*return*/, new __1.Response(__1.StatusCode.notFound).setBody({
                                errors: [
                                    {
                                        code: "not-found",
                                        message: "404 Not found",
                                    },
                                ],
                            })];
                }
            });
        }); };
        this.getApiDoc = function (version) {
            return generator_1.generateDoc(version);
        };
        this.executeMiddlewareBefore = function (before, request) { return __awaiter(_this, void 0, void 0, function () {
            var response, _i, before_1, handler;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = null;
                        _i = 0, before_1 = before;
                        _b.label = 1;
                    case 1:
                        if (!(_i < before_1.length)) return [3 /*break*/, 4];
                        handler = before_1[_i];
                        return [4 /*yield*/, handler(request)];
                    case 2:
                        _a = _b.sent(), request = _a[0], response = _a[1];
                        if (response) {
                            return [2 /*return*/, [null, response]];
                        }
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, [request, null]];
                }
            });
        }); };
        this.executeMiddlewareAfter = function (after, response) { return __awaiter(_this, void 0, void 0, function () {
            var _i, after_1, handler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _i = 0, after_1 = after;
                        _a.label = 1;
                    case 1:
                        if (!(_i < after_1.length)) return [3 /*break*/, 4];
                        handler = after_1[_i];
                        return [4 /*yield*/, handler(response)];
                    case 2:
                        response = _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, response];
                }
            });
        }); };
        this.removeTrailingSlash = function (requestPath) {
            if (requestPath.endsWith("/")) {
                requestPath = requestPath.substr(0, requestPath.length - 1);
            }
            return requestPath;
        };
        this.resolveHandler = function (method, path) {
            var _a, _b;
            var requestPath = _this.removeTrailingSlash(path);
            var pathParams = null;
            var metadata = metadata_storage_1.getMetadataStorage();
            logger_1.Logger.log("Router registered paths::", metadata.getPaths());
            var routeMeta = null;
            var methodMeta = metadata.paths.get(requestPath);
            if (methodMeta) {
                routeMeta = methodMeta[method];
            }
            if (!routeMeta) {
                var basePath = path.split("?")[0];
                var basePathComponents = basePath.split("/");
                var routeKeys = metadata.getPaths().sort(function (a, b) {
                    return a.split("{").length - b.split("{").length;
                });
                pathParams = {};
                logger_1.Logger.log("Route keys::", JSON.stringify(routeKeys));
                for (var _i = 0, routeKeys_1 = routeKeys; _i < routeKeys_1.length; _i++) {
                    var routeKey = routeKeys_1[_i];
                    var routeComponents = routeKey.split("/");
                    if (routeComponents.length === basePathComponents.length) {
                        var isValidRoute = true;
                        for (var i = 0; i < routeComponents.length; i++) {
                            var routeComponent = routeComponents[i];
                            var basePathComponent = basePathComponents[i];
                            if (basePathComponent !== routeComponent) {
                                if (routeComponent.startsWith("{")) {
                                    var paramName = routeComponent.slice(1, routeComponent.length - 1);
                                    pathParams[paramName] = {
                                        name: paramName,
                                        value: decodeURIComponent(basePathComponents[i]),
                                        index: i,
                                    };
                                }
                                else {
                                    isValidRoute = false;
                                }
                            }
                        }
                        if (isValidRoute) {
                            var validMethodMeta = metadata.paths.get(routeKey);
                            if (validMethodMeta) {
                                routeMeta = validMethodMeta[method];
                                break;
                            }
                        }
                    }
                }
            }
            return [(routeMeta !== null && routeMeta !== void 0 ? routeMeta : null), (pathParams !== null && pathParams !== void 0 ? pathParams : null), (_b = (_a = routeMeta) === null || _a === void 0 ? void 0 : _a.middleware, (_b !== null && _b !== void 0 ? _b : null))];
        };
    }
    Router.prototype.getRandomValue = function (keyMetadata) {
        switch (keyMetadata.type) {
            case "string": {
                return get_random_1.getDefaultRandomString();
            }
            case "boolean": {
                return get_random_1.getRandomBoolean();
            }
            default: {
                return get_random_1.getDefaultRandomInteger();
            }
        }
    };
    Router.prototype.mockResponse = function (request, statusCode) {
        var route = this.resolveHandler(request.method, request.path)[0];
        if (!route) {
            throw new Error("The route " + request.method + ":" + request.path + " is not defined");
        }
        var responseMeta = route.responses.find(function (r) { return r.statusCode === statusCode; });
        if (!responseMeta) {
            throw new Error("The route " + request.method + ":" + request.path + " does not define a response for status code " + statusCode);
        }
        var metadata = metadata_storage_1.getMetadataStorage();
        var body = responseMeta.body;
        var responseName = body.name;
        var responseMetadata = metadata.entities[responseName];
        var data = responseMetadata.data;
        var resp = this.getMockData(data.objectType);
        return {
            data: resp
        };
    };
    Router.prototype.getMockData = function (modelName) {
        var resp = {};
        var metadata = metadata_storage_1.getMetadataStorage();
        var dataModel = metadata.entities[modelName];
        for (var key in dataModel) {
            if (dataModel.hasOwnProperty(key)) {
                var keyMetadata = dataModel[key];
                if (!["object", "array"].includes(keyMetadata.type)) {
                    resp[key] = this.getRandomValue(keyMetadata);
                }
                if (keyMetadata.type === "object") {
                    var subModelName = keyMetadata.objectType;
                    resp[key] = this.getMockData(subModelName);
                }
            }
        }
        return resp;
    };
    return Router;
}());
exports.Router = Router;
var router;
exports.getRouter = function () {
    if (!router) {
        router = new Router();
    }
    return router;
};
//# sourceMappingURL=router.js.map