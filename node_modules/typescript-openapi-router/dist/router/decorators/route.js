"use strict";
/**
 * Copyright 2020 Valentin Draganescu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var metadata_storage_1 = require("../../metadata/metadata-storage");
var route_metadata_1 = require("../../metadata/route-metadata");
var method_metadata_1 = require("../../metadata/method-metadata");
var logger_1 = require("../../logger");
exports.Route = function (props) {
    return function (target, propertyKey) {
        logger_1.Logger.log("Adding route target::", target.constructor.name);
        logger_1.Logger.log("Adding route prop key::", propertyKey);
        logger_1.Logger.log("Adding route props::", props);
        var metadata = metadata_storage_1.getMetadataStorage();
        var routeMeta = new route_metadata_1.RouteMetadata(target[propertyKey])
            .setResponses(props.responses)
            .setRequestBody(props.requestBody);
        routeMeta.description = props.description;
        routeMeta.summary = props.summary;
        routeMeta.path = props.path;
        routeMeta.parameters = props.parameters;
        routeMeta.security = props.security;
        routeMeta.middleware = props.middleware;
        routeMeta.tags = props.tags;
        routeMeta.example = props.example;
        var methodMetadata;
        if (metadata.paths.has(props.path)) {
            methodMetadata = metadata.paths.get(props.path);
        }
        else {
            methodMetadata = new method_metadata_1.MethodMetadata();
        }
        if (methodMetadata) {
            methodMetadata[props.method] = routeMeta;
            metadata.paths.set(props.path, methodMetadata);
        }
    };
};
//# sourceMappingURL=route.js.map