"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2020 Valentin Draganescu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var status_code_1 = require("./status-code");
var logger_1 = require("../logger");
var Response = /** @class */ (function () {
    function Response(statusCode) {
        var _this = this;
        this.headers = {
            "Content-Type": "application/json",
            "Cache-Control": "private, max-age=0, no-cache, no-store, must-revalidate'",
            Expires: "-1",
            Pragma: "no-cache",
            "Access-Control-Expose-Headers": "X-Api-Version",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Credentials": "true"
        };
        this.setBody = function (body) {
            if (typeof body === "object") {
                if (body instanceof Buffer) {
                    _this.body = body;
                }
                else {
                    _this.body = JSON.stringify(body);
                }
            }
            else {
                _this.body = body;
            }
            return _this;
        };
        this.getBody = function () {
            if (_this.body) {
                // this is such a bad thing to do
                try {
                    return JSON.parse(_this.body);
                }
                catch (err) {
                    logger_1.Logger.log("Body is not an object, returning null");
                }
            }
            return _this.body;
        };
        this.addHeader = function (key, value) {
            _this.headers[key] = value;
            return _this;
        };
        this.addHeaders = function (headers) {
            for (var _i = 0, _a = Object.entries(headers); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                _this.addHeader(key, value);
            }
            return _this;
        };
        this.setHeader = function (key, value) {
            _this.headers[key] = value;
            return _this;
        };
        this.setHeaders = function (headers) {
            _this.headers = headers;
            return _this;
        };
        this.statusCode = (statusCode !== null && statusCode !== void 0 ? statusCode : status_code_1.StatusCode.okay);
    }
    Response.prototype.toJSON = function () {
        var _a = this, statusCode = _a.statusCode, headers = _a.headers, body = _a.body;
        return { statusCode: statusCode, headers: headers, body: body };
    };
    return Response;
}());
exports.Response = Response;
//# sourceMappingURL=response.js.map